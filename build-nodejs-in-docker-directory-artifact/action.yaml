---
name: Build Nodejs in Docker Directory Artifact
description: Build Nodejs in Docker directory artifact
inputs:
  branch-build:
    description: Branch used for build
    required: true
  working-directory:
    description: Working directory
    required: true
  dockerfile:
    description: Dockerfile
    required: true
  stage-build:
    description: Stage for building artifact
    required: true
  stage-output:
    description: Stage for outputting artifact
    required: true
  stage-status:
    description: Stage for returning status
    required: true
  output-artifact-directory:
    description: Output directory of artifact
    required: true
  output-sbom-directory:
    description: Output directory of sbom
    required: true
  output-checks-directory:
    description: Output directory of checks
    required: true
  output-unit-tests-directory:
    description: Output directory of unit tests
    required: true
  output-coverage-directory:
    description: Output directory of coverage
    required: true
  output-integration-tests-directory:
    description: Output directory of integration tests
    required: true
  ACCESS_TOKEN:
    description: Access token
    required: true
outputs:
  build-artifacts-directory-upload-name:
    description: Name of build artifacts upload
    value: ${{ steps.upload.outputs.name }}
runs:
  using: "composite"
  steps:
    # git-checkout
    - uses: aps831/gh-actions/git-checkout@master
      with:
        branch: ${{ inputs.branch-build }}

    # docker-build-artifact
    - uses: aps831/gh-actions/docker-build-artifact@master
      with:
        docker-context: ${{ inputs.working-directory }}
        dockerfile: ${{ inputs.working-directory }}/${{ inputs.dockerfile }}
        output-directory: ${{ inputs.working-directory }}
        stage-build: ${{ inputs.stage-build }}
        stage-output: ${{ inputs.stage-output }}
        stage-status: ${{ inputs.stage-status }}

    # output-junit-test-summary
    - uses: aps831/gh-actions/action-output-junit-test-summary@master
      if: ${{ always() && inputs.output-unit-tests-directory != '' }}
      with:
        test-result-files:
          ${{ inputs.working-directory }}/${{ inputs.output-unit-tests-directory }}/*.xml

    # upload-test-results checks
    - uses: aps831/gh-actions/action-upload-test-results@master
      if: ${{ always() && inputs.output-checks-directory != '' }}
      with:
        type: checks
        test-result-files: ${{ inputs.working-directory }}/${{ inputs.output-checks-directory }}/*

    # upload-test-results unit
    - uses: aps831/gh-actions/action-upload-test-results@master
      if: ${{ always() && inputs.output-unit-tests-directory != '' }}
      with:
        type: unit
        test-result-files:
          ${{ inputs.working-directory }}/${{ inputs.output-unit-tests-directory }}/*

    # upload-test-results coverage
    - uses: aps831/gh-actions/action-upload-test-results@master
      if: ${{ always() && inputs.output-coverage-directory != '' }}
      with:
        type: coverage
        test-result-files: ${{ inputs.working-directory }}/${{ inputs.output-coverage-directory }}/*

    # upload-test-results integration
    - uses: aps831/gh-actions/action-upload-test-results@master
      if: ${{ always() && inputs.output-integration-tests-directory != '' }}
      with:
        type: integration
        test-result-files:
          ${{ inputs.working-directory }}/${{ inputs.output-integration-tests-directory }}/*

    # zip artifact folder
    - name: zip artifact folder
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        zip ${{ inputs.output-artifact-directory }}.zip ${{ inputs.output-artifact-directory }}/*

    # build-artifacts-upload
    - uses: aps831/gh-actions/action-build-artifacts-upload@master
      id: upload
      with:
        description: directory-artifact
        build-files: |
          ${{ inputs.working-directory }}/${{ inputs.output-artifact-directory }}.zip
          ${{ inputs.working-directory }}/${{ inputs.output-sbom-directory }}/cyclonedx.json

    # delete zip file
    - name: delete zip file
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        rm ${{ inputs.output-artifact-directory }}.zip
