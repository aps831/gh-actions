---
name: Github Latest Good Release Tag
description: Get Github latest good release tag
inputs:
  fallback:
    description: Tag to return if none found
    required: true
  ACCESS_TOKEN:
    description: Access token
    required: true
outputs:
  tag:
    description: Latest tag
    value: ${{ steps.result.outputs.result }}
runs:
  using: "composite"
  steps:
    - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # pin@v7
      id: result
      with:
        script: |
          var release = undefined;
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          release = releases.filter(release => release.draft == false && release.prerelease == false).map(release => release.tag_name)[0];
          if (release == undefined) {
            return "${{ inputs.fallback }}";
          } else {
            return release;
          }
        result-encoding: string
        github-token: ${{ inputs.ACCESS_TOKEN }}
