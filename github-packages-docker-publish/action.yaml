---
name: Github Publish Docker Image
description: Github publish Docker image
inputs:
  image-name:
    description: Docker image name
    required: true
  tag:
    description: Tag
    required: true
  build-artifacts-upload-name:
    description: Name of build artifacts upload
    required: true
  COSIGN_PRIVATE_KEY:
    description: Cosign private key
    required: true
  COSIGN_PASSWORD:
    description: Cosign password
    required: true
outputs:
  name:
    description: Name of Docker image
    value: ${{ steps.tags.outputs.version }}
runs:
  using: "composite"
  steps:
    # cosign-installer
    - uses: sigstore/cosign-installer@e1523de7571e31dbe865fd2e80c5c7c23ae71eb4 # pin@v3.4.0

    # build-artifacts-download
    - uses: aps831/gh-actions/action-publish-artifacts-download@f7725b1c8150b68dbbd0198403733b889940a05f # pin@master
      id: artifacts-folder
      with:
        pattern: ${{ inputs.build-artifacts-upload-name }}

    # git-short-hash
    - uses: aps831/gh-actions/git-short-hash@f7725b1c8150b68dbbd0198403733b889940a05f # pin@master
      id: hash

    # load docker image
    - shell: bash
      working-directory:
        ${{ steps.artifacts-folder.outputs.artifacts-folder }}/${{
        inputs.build-artifacts-upload-name }}
      run: |
        for file in *.tar; do
          docker load --input $file
        done

    # base image name
    - id: base
      shell: bash
      run: |
        base="ghcr.io/${{ github.repository_owner }}/${{ inputs.image-name }}"
        echo "base=$base" >> $GITHUB_OUTPUT

    # calculate tags
    - id: tags
      shell: bash
      run: |
        hash="${{ steps.base.outputs.base }}:${{ steps.hash.outputs.hash }}"
        version="${{ steps.base.outputs.base }}:${{ inputs.tag }}"
        latest="${{ steps.base.outputs.base }}:latest"
        echo "hash=$hash" >> $GITHUB_OUTPUT
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "latest=$latest" >> $GITHUB_OUTPUT

    # retag images
    - shell: bash
      run: |
        docker tag "${{ steps.tags.outputs.hash }}" "${{ steps.tags.outputs.version }}"
        docker tag "${{ steps.tags.outputs.hash }}" "${{ steps.tags.outputs.latest }}"

    # publish
    - shell: bash
      run: |
        docker push "${{ steps.tags.outputs.version }}"
        docker push "${{ steps.tags.outputs.latest }}"

    # calculate digest
    - id: digest
      shell: bash
      run: |
        digest=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ steps.base.outputs.base }})
        digest="${digest##*@}"
        echo "digest=$digest" >> $GITHUB_OUTPUT

    # sign image
    - name: Sign image with a key
      shell: bash
      run: |
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${{ steps.base.outputs.base }}@${{ steps.digest.outputs.digest }}"
      env:
        COSIGN_PRIVATE_KEY: ${{ inputs.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ inputs.COSIGN_PASSWORD }}

    # generate artifact attestation
    - name: Generate artifact attestation
      if: ${{ github.event.repository.visibility == 'public' }}
      uses: actions/attest-build-provenance@310b0a4a3b0b78ef57ecda988ee04b132db73ef8 # pin@v1
      with:
        subject-name: ${{ steps.base.outputs.base }}
        subject-digest: ${{ steps.digest.outputs.digest }}
        push-to-registry: true

    # generate sbom attestation
    - name: Generate SBOM attestation
      if: ${{ github.event.repository.visibility == 'public' }}
      uses: actions/attest-sbom@f19ab44411e02574a74181cec8eb584319d0f779 # pin@v1
      with:
        subject-name: ${{ steps.base.outputs.base }}
        subject-digest: ${{ steps.digest.outputs.digest }}
        sbom-path:
          ${{ steps.artifacts-folder.outputs.artifacts-folder }}/${{
          inputs.build-artifacts-upload-name }}/cyclonedx.json
        push-to-registry: true

    # delete downloaded artifacts
    - shell: bash
      working-directory:
        ${{ steps.artifacts-folder.outputs.artifacts-folder }}/${{
        inputs.build-artifacts-upload-name }}
      run: |
        for file in *; do
          rm $file
        done
